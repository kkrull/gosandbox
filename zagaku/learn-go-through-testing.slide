Get Your Gopher On
Learning Go Through Testing
16:00 15 Apr 2018
Tags: go, testing

Kyle Krull
Resident Apprentice, 8th Light
kkrull@8thlight.com
https://kkrull.github.io/
@KrullKyle


* Go...how?

So you want to learn Go.  _How_do_you_do_that?_

The authors of Structure & Interpretation of Computer Programs recommend studying:

- primitives
- means of combination
- means of abstraction

.image images/sicp-wizard.jpg _ 300


* Go ponder one more question

There's one more aspect to study when learning a new language.

*the*means*of*testing*

Testing early gives you a quick feedback loop to help you learn the other 3 aspects of the language.

To say I have learned some new syntax or language feature, I want to be able to:

- write the code that uses it
- write the code that verifies its outcome


* Go get to the point

For today, what can we learn about Go _by_writing_tests_?

Think of this as writing your own Koans for Go.


* Go get started

Download the binary distribution [[https://golang.org/doc/install]], or

    $ brew install go


Then set up your environment

1. Set your `GOPATH`.
2. Add Go binaries to your system PATH.

    go version >/dev/null 2>&1
    if (( $? == 0 ))
    then
      export PATH="$PATH:$(go env GOPATH)/bin"
    fi

3. Use the `go` tools:

- $ go get <url> – download a package to $GOPATH/src
- $ go {build|run|install} – compile, run, and install binaries to $GOPATH/bin


* Go test

Testing is built in with the [[https://golang.org/pkg/testing][testing]] package.  Hooray!

.code greet/greet_test.go

    $ go test
    PASS
    ok      github.com/kkrull/gosandbox/zagaku/greet        0.008s


* Go learn some primitives

.code greet_annotated/greet_test.go


* Go get some better testing libraries

[[http://onsi.github.io/ginkgo/][Ginkgo]] offers a spec-style test syntax that's much more expressive.

[[http://onsi.github.io/gomega/][Gomega]] has assertion functions and argument matchers that integrate nicely with Ginkgo.

    $ go get github.com/onsi/ginkgo/ginkgo
    $ go get github.com/onsi/gomega/...

Now you can describe behavior and organize your tests...

.code greet_with_ginkgo/greet_test.go /START OMIT/,/END OMIT/

Run tests with

- `go`test`
- `ginkgo`[watch]`


* Ginkgo integrates with built-in testing

    $ cd greet_with_ginkgo
    $ ginkgo bootstrap

.code greet_with_ginkgo/greet_suite_test.go /START OMIT/,/END OMIT/


    $ ginkgo generate greet_blank

.code greet_with_ginkgo/greet_blank_test.go


* go learn about structs

.code primitive/struct_test.go /START OMIT/,/END OMIT/



* channels are a thing

asdf


* go do _all_the_things_ at once

asdf
